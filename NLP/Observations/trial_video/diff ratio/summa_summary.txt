In this lecture we learn about some of the basics of binary trees.
This lecture deals with introduction to binary trees.
So let's first see what are trees?
Unlike those linear structures like aries or lengthless, trees are hierarchical data structures.
Now let us see some terms related to trees.
Trees are made up of nodes and edges.
The topmost node is referred as the root node.
So in this example, A is the root node and the nodes which are directly below a node are known as its children and that node is referred to as parent of those nodes.
So B and C are children of A and A is the parent of B and C nodes.
Also G is parent of H and I and H and I are known as children of G.
If two nodes have same parent like B and C, they both have same parent as A, so they are known as siblings.
And also we can see that nodes H and I, they have same parent as G, so they are also siblings.
And another example of siblings in this is De and F, they all three nodes have same parent as B.
So these all three nodes are siblings.
Another term used in trees are the leaf nodes.
So leaf nodes are those nodes which do not have any children.
So in this example, Desh and I, these five nodes do not have any child, so they are known as leaf nodes.
Now let us look at a particular type of tree called a pinery tree.
So main property of this tree is that all the nodes in this tree can have at most two child nodes.
That means any node of this binary tree can have zero, one or two children, since each node has only two children.
So we call one as the left child and other as the right child.
So in this example we can see that this is a binary tree as all the nodes have maximum of only two children.
So in this example, node one has two children, two and three.
Again, node two has only two children, four and five, three has only two children, six and seven.
And nodes four, five, six and seven, these are leaf nodes, so they do not have any children.
So they have zero children.
So there are some more examples of binary trees.
So this one, is it a binary tree or not?
Since all the nodes in this tree have maximum of two children, as we can see that eight has only two children, five and four five has two children, nine and seven, seven has two children, one and twelve and twelve has only one child, that is two.
Here on the right side of the tree.
Four has only one child, eleven has only one child.
So node in this tree has more than two children.
So hence it is a binary tree.
In the second example we can see that each node let's start with node two, it has two children, node seven has again two children, node five has only one child, node six has two children, node two has no children and node nine has only one child.
So again in this example also no node has more than two children.
So it is also a binary tree.
Now we will look at binary tree representation in C.
In order to represent a binary tree we define a structure which contains the following parts.
First, a data part to store the data value.
Second, a pointer to the left child that stores the address of the left child of that node.
And third, the right child that stores the pointer to the right child of the node.
A binary tree is represented by a pointer pointing towards the root node of the tree.
So in C it is simply we'll make a structure node and this would be the data part of the type integer and other two will be the pointer to the left child and the right child.
Now this code is to create a new node in binary tree.
So the first statement here, this first statement here this statement dynamically allocates memory for a new node.
So now in the second statement we are putting the data to be stored in the tree in the data part of the node and in these two statements, and in these two statements it is initializing the right and the left child of the node as null.
And finally we are returning the node.
So this is the main function.
The first line of this function we are creating a node name as root and we are calling the function new node and passing one as the argument.
So as we have seen the function what new node does is that it dynamically allocates a memory for a node and it initializes the data part of the node by the value sent through the argument.
And the left side and the right side of the node are initialized by null.
So as we can see, this will return a node having value as one and it's left side and right side as null.
As we can see here it is depicted we will get a tree who has a single node in it and its value is one and both its left child and right child are pointing towards null because it is the only node.
Only one node is present in this tree.
Now in the next step the root is left equal to new node of two.
So now again new node function is called by passing the value two.
So now this will again return another node with value data value as two.
And the left shell and right shell pointing towards null.
And this statement this will return to root of left.
So now the left child of root will point towards this new node.
So the left child will have the value too.
From the next statement, we see that root of right equal to new node of three.
We put the value three as the right child of the root node.
So we will get a tree as shown below here.
As we can see, we will get a tree like this.
One will be the root, two will be its left child.
Three will be right child and both children of two and both children of three.
This is the root of left of left.
So we know root is one and its left child is two.
And its left child is still null.
So now we will put the now we will put the value in the left child of two.
So now we'll again calling the new node which will again return.
A node with value four and three will become like this, as shown here.
So one will be the root, two will be its left child.
Three will be its right child and two's left side will be four.
So this is a function.
So this program will give us a tree like this, as shown here.
That's it for the introduction part of the tree.